utton Component (src/components/Button.jsx)
jsx
import PropTypes from 'prop-types'

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'medium',
  className = '', 
  ...props 
}) => {
  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-white',
    danger: 'bg-red-600 hover:bg-red-700 text-white',
  }

  const sizes = {
    small: 'px-3 py-1 text-sm',
    medium: 'px-4 py-2 text-base',
    large: 'px-6 py-3 text-lg',
  }

  return (
    <button
      className={`rounded-md transition-colors ${variants[variant]} ${sizes[size]} ${className}`}
      {...props}
    >
      {children}
    </button>
  )
}

Button.propTypes = {
  children: PropTypes.node.isRequired,
  variant: PropTypes.oneOf(['primary', 'secondary', 'danger']),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  className: PropTypes.string,
}

export default Button
2. Task Manager with Enhanced Features (src/pages/Tasks.jsx)
jsx
import { useState } from 'react'
import useLocalStorage from '../hooks/useLocalStorage'
import Button from '../components/Button'
import Card from '../components/Card'

const Tasks = () => {
  const [tasks, setTasks] = useLocalStorage('tasks', [])
  const [newTask, setNewTask] = useState('')
  const [filter, setFilter] = useState('all')
  const [editId, setEditId] = useState(null)
  const [editText, setEditText] = useState('')

  const addTask = () => {
    if (newTask.trim()) {
      setTasks([...tasks, { 
        id: Date.now(), 
        text: newTask, 
        completed: false,
        createdAt: new Date().toISOString()
      }])
      setNewTask('')
    }
  }

  const startEdit = (task) => {
    setEditId(task.id)
    setEditText(task.text)
  }

  const saveEdit = () => {
    setTasks(tasks.map(task => 
      task.id === editId ? { ...task, text: editText } : task
    ))
    setEditId(null)
  }

  const toggleTask = (id) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    )
  }

  const deleteTask = (id) => {
    setTasks(tasks.filter((task) => task.id !== id))
  }

  const clearCompleted = () => {
    setTasks(tasks.filter(task => !task.completed))
  }

  const filteredTasks = tasks.filter((task) => {
    if (filter === 'active') return !task.completed
    if (filter === 'completed') return task.completed
    return true
  }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))

  return (
    <div className="max-w-2xl mx-auto">
      <Card className="mb-6">
        <h1 className="text-2xl font-bold mb-4">Task Manager</h1>
        <div className="flex gap-2 mb-4">
          <input
            type="text"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
            placeholder="Add a new task"
            className="flex-grow px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600"
            onKeyPress={(e) => e.key === 'Enter' && addTask()}
          />
          <Button onClick={addTask}>Add</Button>
        </div>

        <div className="flex flex-wrap gap-2 mb-4">
          <Button
            variant={filter === 'all' ? 'primary' : 'secondary'}
            size="small"
            onClick={() => setFilter('all')}
          >
            All ({tasks.length})
          </Button>
          <Button
            variant={filter === 'active' ? 'primary' : 'secondary'}
            size="small"
            onClick={() => setFilter('active')}
          >
            Active ({tasks.filter(t => !t.completed).length})
          </Button>
          <Button
            variant={filter === 'completed' ? 'primary' : 'secondary'}
            size="small"
            onClick={() => setFilter('completed')}
          >
            Completed ({tasks.filter(t => t.completed).length})
          </Button>
          {tasks.some(t => t.completed) && (
            <Button
              variant="danger"
              size="small"
              onClick={clearCompleted}
            >
              Clear Completed
            </Button>
          )}
        </div>
      </Card>

      {filteredTasks.length === 0 ? (
        <Card>
          <p className="text-center text-gray-500">
            {filter === 'all'
              ? 'No tasks yet. Add one above!'
              : filter === 'active'
              ? 'No active tasks'
              : 'No completed tasks'}
          </p>
        </Card>
      ) : (
        <ul className="space-y-2">
          {filteredTasks.map((task) => (
            <li key={task.id}>
              <Card className="flex items-center justify-between">
                <div className="flex items-center flex-grow">
                  <input
                    type="checkbox"
                    checked={task.completed}
                    onChange={() => toggleTask(task.id)}
                    className="h-5 w-5 rounded text-blue-600 focus:ring-blue-500 mr-3"
                  />
                  {editId === task.id ? (
                    <input
                      type="text"
                      value={editText}
                      onChange={(e) => setEditText(e.target.value)}
                      onBlur={saveEdit}
                      onKeyPress={(e) => e.key === 'Enter' && saveEdit()}
                      autoFocus
                      className="flex-grow px-2 py-1 border rounded focus:outline-none focus:ring-1 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600"
                    />
                  ) : (
                    <span
                      className={`flex-grow ${task.completed ? 'line-through text-gray-500' : ''}`}
                      onDoubleClick={() => startEdit(task)}
                    >
                      {task.text}
                    </span>
                  )}
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="secondary"
                    size="small"
                    onClick={() => editId === task.id ? saveEdit() : startEdit(task)}
                  >
                    {editId === task.id ? 'Save' : 'Edit'}
                  </Button>
                  <Button
                    variant="danger"
                    size="small"
                    onClick={() => deleteTask(task.id)}
                  >
                    Delete
                  </Button>
                </div>
              </Card>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

export default Tasks
3. Enhanced API Integration (src/pages/ApiData.jsx)
jsx
import { useState, useEffect } from 'react'
import Card from '../components/Card'
import Button from '../components/Button'

const ApiData = () => {
  const [posts, setPosts] = useState([])
  const [users, setUsers] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState('posts')
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 6

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        setError(null)
        
        if (activeTab === 'posts') {
          const response = await fetch(
            'https://jsonplaceholder.typicode.com/posts'
          )
          if (!response.ok) throw new Error('Failed to fetch posts')
          const data = await response.json()
          setPosts(data)
        } else {
          const response = await fetch(
            'https://jsonplaceholder.typicode.com/users'
          )
          if (!response.ok) throw new Error('Failed to fetch users')
          const data = await response.json()
          setUsers(data)
        }
      } catch (err) {
        setError(err.message)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [activeTab])

  const filteredData = (activeTab === 'posts' ? posts : users).filter((item) =>
    activeTab === 'posts'
      ? item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.body.toLowerCase().includes(searchTerm.toLowerCase())
      : item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.email.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const totalPages = Math.ceil(filteredData.length / itemsPerPage)
  const paginatedData = filteredData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  )

  return (
    <div className="max-w-4xl mx-auto">
      <Card className="mb-6">
        <h1 className="text-2xl font-bold mb-4">API Data Explorer</h1>
        
        <div className="flex gap-4 mb-4">
          <Button
            variant={activeTab === 'posts' ? 'primary' : 'secondary'}
            onClick={() => setActiveTab('posts')}
          >
            Posts
          </Button>
          <Button
            variant={activeTab === 'users' ? 'primary' : 'secondary'}
            onClick={() => setActiveTab('users')}
          >
            Users
          </Button>
        </div>

        <div className="flex gap-2 mb-4">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder={`Search ${activeTab}...`}
            className="flex-grow px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600"
          />
        </div>
      </Card>

      {loading ? (
        <Card>
          <div className="flex justify-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        </Card>
      ) : error ? (
        <Card>
          <p className="text-center text-red-500">{error}</p>
          <div className="flex justify-center mt-4">
            <Button onClick={() => window.location.reload()}>Retry</Button>
          </div>
        </Card>
      ) : filteredData.length === 0 ? (
        <Card>
          <p className="text-center text-gray-500">No {activeTab} found</p>
        </Card>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            {paginatedData.map((item) => (
              <Card key={item.id} className="hover:shadow-lg transition-shadow">
                {activeTab === 'posts' ? (
                  <>
                    <h3 className="font-bold text-lg mb-2">{item.title}</h3>
                    <p className="text-gray-600 dark:text-gray-400 mb-2">{item.body}</p>
                    <p className="text-sm text-gray-500">Post ID: {item.id}</p>
                  </>
                ) : (
                  <>
                    <h3 className="font-bold text-lg mb-2">{item.name}</h3>
                    <p className="text-gray-600 dark:text-gray-400 mb-1">{item.email}</p>
                    <p className="text-gray-600 dark:text-gray-400 mb-1">{item.phone}</p>
                    <p className="text-sm text-gray-500">{item.company.name}</p>
                  </>
                )}
              </Card>
            ))}
          </div>

          {totalPages > 1 && (
            <Card className="flex justify-center items-center gap-2">
              <Button
                variant="secondary"
                size="small"
                disabled={currentPage === 1}
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              >
                Previous
              </Button>
              <span className="px-4">
                Page {currentPage} of {totalPages}
              </span>
              <Button
                variant="secondary"
                size="small"
                disabled={currentPage === totalPages}
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              >
                Next
              </Button>
            </Card>
          )}
        </>
      )}
    </div>
  )
}

export default ApiData
4. Enhanced Theme Context (src/context/ThemeContext.js)
jsx
import { createContext, useContext, useEffect, useState } from 'react'

const ThemeContext = createContext()

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light')
  const [systemPreference, setSystemPreference] = useState(false)

  useEffect(() => {
    // Check for saved theme preference
    const savedTheme = localStorage.getItem('theme')
    const savedPreference = localStorage.getItem('useSystemPreference') === 'true'

    if (savedPreference) {
      setSystemPreference(true)
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches 
        ? 'dark' 
        : 'light'
      setTheme(systemTheme)
    } else if (savedTheme) {
      setTheme(savedTheme)
    } else {
      setTheme('light')
    }

    // Watch for system theme changes
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')
    const handleSystemThemeChange = (e) => {
      if (systemPreference) {
        setTheme(e.matches ? 'dark' : 'light')
      }
    }

    mediaQuery.addEventListener('change', handleSystemThemeChange)

    return () => {
      mediaQuery.removeEventListener('change', handleSystemThemeChange)
    }
  }, [systemPreference])

  useEffect(() => {
    document.documentElement.classList.toggle('dark', theme === 'dark')
  }, [theme])

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light'
    setTheme(newTheme)
    setSystemPreference(false)
    localStorage.setItem('theme', newTheme)
    localStorage.setItem('useSystemPreference', 'false')
  }

  const toggleSystemPreference = () => {
    const newPreference = !systemPreference
    setSystemPreference(newPreference)
    localStorage.setItem('useSystemPreference', newPreference.toString())
    
    if (newPreference) {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches 
        ? 'dark' 
        : 'light'
      setTheme(systemTheme)
    }
  }

  return (
    <ThemeContext.Provider value={{ 
      theme, 
      toggleTheme, 
      systemPreference, 
      toggleSystemPreference 
    }}>
      {children}
    </ThemeContext.Provider>
  )
}

export const useTheme = () => useContext(ThemeContext)
5. Enhanced Theme Toggle (src/components/ThemeToggle.jsx)
jsx
import { useTheme } from '../context/ThemeContext'

const ThemeToggle = () => {
  const { 
    theme, 
    toggleTheme, 
    systemPreference, 
    toggleSystemPreference 
  } = useTheme()

  return (
    <div className="flex items-center gap-2">
      <button
        onClick={toggleTheme}
        className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
        aria-label="Toggle theme"
        title={theme === 'light' ? 'Switch to dark mode' : 'Switch to light mode'}
      >
        {theme === 'light' ? (
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        ) : (
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path
              fillRule="evenodd"
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
              clipRule="evenodd"
            />
          </svg>
        )}
      </button>
      
      <label className="relative inline-flex items-center cursor-pointer">
        <input 
          type="checkbox" 
          checked={systemPreference}
          onChange={toggleSystemPreference}
          className="sr-only peer" 
        />
        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
        <span className="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">
          System
        </span>
      </label>
    </div>
  )
}

export default ThemeToggle
Final Steps
Update src/main.jsx:

jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import { ThemeProvider } from './context/ThemeContext'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ThemeProvider>
      <App />
    </ThemeProvider>
  </React.StrictMode>
)
Update src/App.jsx:

jsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import Layout from './components/Layout'
import Home from './pages/Home'
import Tasks from './pages/Tasks'
import ApiData from './pages/ApiData'

const App = () => {
  return (
    <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/tasks" element={<Tasks />} />
          <Route path="/api-data" element={<ApiData />} />
        </Routes>
      </Layout>
    </Router>
  )
}

export default App
Create src/pages/Home.jsx:

jsx
import Card from '../components/Card'
import Button from '../components/Button'
import { Link } from 'react-router-dom'

const Home = () => {
  return (
    <div className="max-w-2xl mx-auto">
      <Card className="text-center">
        <h1 className="text-3xl font-bold mb-4">Welcome to TaskMaster</h1>
        <p className="mb-6">
          A modern task management application built with React, Tailwind CSS,
          and React Router. Manage your tasks and explore API data in one place.
        </p>
        <div className="flex justify-center gap-4 flex-wrap">
          <Link to="/tasks">
            <Button size="large">View Tasks</Button>
          </Link>
          <Link to="/api-data">
            <Button variant="secondary" size="large">Explore API Data</Button>
          </Link>
        </div>
      </Card>
    </div>
  )
}

export default Home
